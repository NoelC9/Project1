# Project1
First Assignment

import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
public class CSVUtils {
    private static final char DEFAULT_SEPARATOR = ',';
    private static final char DEFAULT_QUOTE = '"';
    public static void main(String[] args) throws Exception {
        String csvFile = "C:/Users/noelc/Documents/Semester 5/CS 3250/inventory_team2.csv"; // Path for file
        Scanner scanner = new Scanner(new File(csvFile));//Scanner for file
        Scanner scan = new Scanner(System.in);
       List<String> line = null;
        while (scanner.hasNext()) {                                                 //While there is another line
             line = parseLine(scanner.nextLine());              //Make list "line" by calling parseLine and
                                                                            //passing in the next line
            System.out.println("[id = " + line.get(0) + ", quantity = " + line.get(1) +
                    " , wholesale_cost =" + line.get(2) + ", sale_price " + line.get(3) + "]");
                                                                            //print out all of the lines
        }
        /*System.out.println("Enter id to search: ");
        String iDToSearch = scan.nextLine();
       if(line.contains(iDToSearch)) {
           System.out.println("Item found ");
       }*/


        scanner.close();             //close the scanner
    }// end main
    public static List<String> parseLine(String cvsLine) {            //first parseLine method called
        return parseLine(cvsLine, DEFAULT_SEPARATOR, DEFAULT_QUOTE);  // RETURNS content from parseLine and passes
                                                                      // a string, character, and character
    }
    public static List<String> parseLine(String cvsLine, char separators) { //This method might not be needed?
        return parseLine(cvsLine, separators, DEFAULT_QUOTE);
    }
    public static List<String> parseLine(String cvsLine, char separators, char customQuote) { //Method called by first
                                                                                              //parseLine
        List<String> result = new ArrayList<>();           //Create new ArrayList
        //if empty, return!
        if (cvsLine == null && cvsLine.isEmpty()) {       //First Case check if there is no content
            return result;                                //If true then return
        }//end if
        if (customQuote == ' ') {                         //Second case check char customQuote
            customQuote = DEFAULT_QUOTE;                 //If true, char customQuote = DEFAULT_QUOTE
        }// end if
        if (separators == ' ') {                         //Third case check char separators
            separators = DEFAULT_SEPARATOR;              //If true, separators = DEFAULT_SEPARATOR
        }// end if
        StringBuffer curVal = new StringBuffer();        // new StringBuffer
        boolean inQuotes = false;
        boolean startCollectChar = false;
        boolean doubleQuotesInColumn = false;
        char[] chars = cvsLine.toCharArray();           // make the csv line into a char array
        for (char ch : chars) {                         // for every character
            if (inQuotes) {                             // if not in quotes or until in quotes
                startCollectChar = true;
                if (ch == customQuote) {                //compare ch to customQuote
                    inQuotes = false;
                    doubleQuotesInColumn = false;
                } else {
                    //Fixed : allow "" in custom quote enclosed
                    if (ch == '\"') {
                        if (!doubleQuotesInColumn) {
                            curVal.append(ch);
                            doubleQuotesInColumn = true;
                        }
                    } else {
                        curVal.append(ch);          // add ch to curVal string buffer
                    }
                }
            } else {                                // inQuotes = true
                if (ch == customQuote) {            //Compare ch to customQuote
                    inQuotes = true;
                    //Fixed : allow "" in empty quote enclosed
                    if (chars[0] != '"' && customQuote == '\"') {
                        curVal.append('"');
                    }
                    //double quotes in column will hit this!
                    if (startCollectChar) {
                        curVal.append('"');
                    }
                } else if (ch == separators) {    // compare ch to separators if ch doesn't equal customQuote
                    result.add(curVal.toString());
                    curVal = new StringBuffer();
                    startCollectChar = false;
                } else if (ch == '\r') {
                    //ignore LF characters
                    continue;
                } else if (ch == '\n') {
                    //the end, break!
                    break;
                } else {
                    curVal.append(ch);
                }
            }
        }// end for
        result.add(curVal.toString());
        return result;                          //return the arraylist results.
    }// end parseLine
}//end class
